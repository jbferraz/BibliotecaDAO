/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import javax.swing.JOptionPane;
import model.Cliente;
import sevicos.ClienteServicos;

/**
 *
 * @author Jair Ferraz
 */
public class CadastroCliente extends javax.swing.JInternalFrame {

    /**
     * Creates new form CadastroCliente
     */
    private int tipo;
    private int atual = 0;

    public CadastroCliente() {
        clienteS = new ClienteServicos();
        initComponents();
        tipo = 1;
        manipulaJanela();
    }

    public CadastroCliente(int tipo) {
        clienteS = new ClienteServicos();
        initComponents();
        this.tipo = tipo;
        manipulaJanela();
    }

    public void manipulaJanela() {
        if (tipo == 1) {
            jbCadastrar.setText("Cadastrar");
            jbAnterior.setVisible(false);
            jBProximo.setVisible(false);
        }
        if (tipo == 2) {
            jbCadastrar.setText("Editar");
            jbAnterior.setVisible(false);
            jBProximo.setVisible(false);
        }
        if (tipo == 3) {
            jbCadastrar.setText("Editar");
            jbAnterior.setVisible(true);
            jBProximo.setVisible(true);
            exibirPrimCliente();
        }
        if (tipo == 4) {
            jbCadastrar.setText("Excluir");
            jbAnterior.setVisible(false);
            jBProximo.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jtfNome = new javax.swing.JTextField();
        jtfTelefone = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jtfMatricula = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jbCadastrar = new javax.swing.JButton();
        jbAnterior = new javax.swing.JButton();
        jBProximo = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Cadastro de Cliente");
        setPreferredSize(new java.awt.Dimension(312, 180));
        setRequestFocusEnabled(false);
        setVerifyInputWhenFocusTarget(false);

        jLabel3.setText("Telefone:");

        jLabel2.setText("Nome:");

        jLabel1.setText("Matricula:");

        jtfMatricula.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfMatriculaFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtfTelefone)
                    .addComponent(jtfNome)
                    .addComponent(jtfMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbCadastrar.setMnemonic('C');
        jbCadastrar.setText("Cadastrar");
        jbCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCadastrarActionPerformed(evt);
            }
        });

        jbAnterior.setMnemonic('A');
        jbAnterior.setText("Anterior");
        jbAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnteriorActionPerformed(evt);
            }
        });

        jBProximo.setText("Próximo");
        jBProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProximoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbCadastrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbAnterior)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBProximo)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCadastrar)
                    .addComponent(jbAnterior)
                    .addComponent(jBProximo))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCadastrarActionPerformed
        if (tipo == 1) {
            cadastrarCliente();
        }
        if (tipo == 2 || tipo == 3) {
            editarCliente();
        }
        if (tipo == 4) {
            excluirliente();
        }
        this.dispose();
    }//GEN-LAST:event_jbCadastrarActionPerformed

    private void jtfMatriculaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfMatriculaFocusLost
        int mat = Integer.parseInt(jtfMatricula.getText());
        if (tipo == 1) {
            if (clienteS.procurarPorMatricula(mat) != null) {
                JOptionPane.showMessageDialog(null, "Cliente já cadastrado!");
                String nome = clienteS.procurarPorMatricula(mat).getNome();
                String telefone = clienteS.procurarPorMatricula(mat).getTelefone();
                jtfNome.setText(nome);
                jtfTelefone.setText(telefone);
                tipo = 2;
                manipulaJanela();
            }
        }
        if (tipo == 2 || tipo == 4) {
            if (clienteS.procurarPorMatricula(mat) == null) {
                JOptionPane.showMessageDialog(null, "Não da dados com essa Matricula!");
            } else {
                String nome = clienteS.procurarPorMatricula(mat).getNome();
                String telefone = clienteS.procurarPorMatricula(mat).getTelefone();
                jtfNome.setText(nome);
                jtfTelefone.setText(telefone);
            }
        }
    }//GEN-LAST:event_jtfMatriculaFocusLost

    private void jbAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnteriorActionPerformed
        irAnt();
    }//GEN-LAST:event_jbAnteriorActionPerformed

    private void jBProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProximoActionPerformed
        irProx();
    }//GEN-LAST:event_jBProximoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBProximo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbAnterior;
    private javax.swing.JButton jbCadastrar;
    private javax.swing.JTextField jtfMatricula;
    private javax.swing.JTextField jtfNome;
    private javax.swing.JTextField jtfTelefone;
    // End of variables declaration//GEN-END:variables
    private ClienteServicos clienteS;

    private void cadastrarCliente() {
        try {
            int mat = Integer.parseInt(jtfMatricula.getText());
            String nome = jtfNome.getText();
            String telefone = jtfTelefone.getText();
            clienteS.addCliente(new Cliente(mat, nome, telefone));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Informe ano apenas digitos!");
            e.printStackTrace();
        }
    }

    private void editarCliente() {
        try {
            int mat = Integer.parseInt(jtfMatricula.getText());
            String nome = jtfNome.getText();
            String telefone = jtfTelefone.getText();
            clienteS.atualizarCliente(new Cliente(mat, nome, telefone));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Informe ano apenas digitos!");
            e.printStackTrace();
        }
    }

    private void irAnt() {
        try {
            atual--;
            int ant = atual;
            if (ant < 0) {
                ant = 0;
                atual = ant;
                JOptionPane.showMessageDialog(null, "Não existe mais clientes");
            }

            if (clienteS.listarClientes() == null) {
                JOptionPane.showMessageDialog(null, "Não existe clientes cadastrados");
            } else {
                String mat = Integer.toString(clienteS.listarClientes().get(ant).getMatricula());
                String nome = clienteS.listarClientes().get(ant).getNome();
                String telefone = clienteS.listarClientes().get(ant).getTelefone();
                jtfMatricula.setText(mat);
                jtfNome.setText(nome);
                jtfTelefone.setText(telefone);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Tente Novamente!");
            e.printStackTrace();
        }
    }

    private void irProx() {
        try {
            atual++;
            int prox = atual;
            int sz = clienteS.listarClientes().size();
            sz--;
            if (prox > sz) {
                prox = sz;
                atual = prox;
                JOptionPane.showMessageDialog(null, "Não existe mais clientes");
            }

            if (clienteS.listarClientes() == null) {
                JOptionPane.showMessageDialog(null, "Não existe clientes cadastrados");
            } else {
                String mat = Integer.toString(clienteS.listarClientes().get(prox).getMatricula());
                String nome = clienteS.listarClientes().get(prox).getNome();
                String telefone = clienteS.listarClientes().get(prox).getTelefone();
                jtfMatricula.setText(mat);
                jtfNome.setText(nome);
                jtfTelefone.setText(telefone);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Tente Novamente!");
            e.printStackTrace();
        }
    }

    private void exibirPrimCliente() {
        if (tipo == 3) {
            try {
                if (clienteS.listarClientes() == null) {
                    JOptionPane.showMessageDialog(null, "Não existe clientes cadastrados");
                } else {
                    String mat = Integer.toString(clienteS.listarClientes().get(atual).getMatricula());
                    String nome = clienteS.listarClientes().get(atual).getNome();
                    String telefone = clienteS.listarClientes().get(atual).getTelefone();
                    jtfMatricula.setText(mat);
                    jtfNome.setText(nome);
                    jtfTelefone.setText(telefone);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Informe ano apenas digitos!");
                e.printStackTrace();
            }
        }
    }

    private void excluirliente() {
        try {
            int mat = Integer.parseInt(jtfMatricula.getText());
            String nome = jtfNome.getText();
            String telefone = jtfTelefone.getText();
            clienteS.atualizarCliente(new Cliente(mat, nome, telefone));
            String[] options = new String[]{"Sim", "Não"};
            int response = JOptionPane.showOptionDialog(null, "Deseja excluir o clientes: " + nome, "Excluir?",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, options, options[0]);
            if (clienteS.procurarPorMatricula(mat) == null) {
                JOptionPane.showMessageDialog(null,"Não ha dados com essa matricula");
            }else if (response == 0) {
                clienteS.excluirCliente(new Cliente(mat, "", ""));  
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Informe ano apenas digitos!");
            e.printStackTrace();
        }
    }
}
